{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IoP (Interoperability On Python) This proof of concept aims to show how the iris interoperability framework can be use with embedded python .","title":"Home"},{"location":"command-line/","text":"Command line Since version 2.3.1, you can use the command line to register your components and productions. To use it, you have to use the following command : iop output : usage: python3 -m iop [-h] [-d DEFAULT] [-l] [-s START] [-k] [-S] [-r] [-M MIGRATE] [-e EXPORT] [-x] [-v] [-L] optional arguments: -h, --help display help and default production name -d DEFAULT, --default DEFAULT set the default production -l, --lists list productions -s START, --start START start a production -k, --kill kill a production (force stop) -S, --stop stop a production -r, --restart restart a production -M MIGRATE, --migrate MIGRATE migrate production and classes with settings file -e EXPORT, --export EXPORT export a production -x, --status status a production -v, --version display version -L, --log display log default production: PEX.Production help The help command display the help and the default production name. iop -h output : usage: python3 -m iop [-h] [-d DEFAULT] [-l] [-s START] [-k] [-S] [-r] [-M MIGRATE] [-e EXPORT] [-x] [-v] [-L] ... default production: PEX.Production default The default command set the default production. With no argument, it display the default production. iop -d output : default production: PEX.Production With an argument, it set the default production. iop -d PEX.Production lists The lists command list productions. iop -l output : { \"PEX.Production\": { \"Status\": \"Stopped\", \"LastStartTime\": \"2023-05-31 11:13:51.000\", \"LastStopTime\": \"2023-05-31 11:13:54.153\", \"AutoStart\": 0 } } start The start command start a production. To exit the command, you have to press CTRL+C. iop -s PEX.Production output : 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting production 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.FileOperation 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.EmailOperation ... kill The kill command kill a production (force stop). Kill command is the same as stop command but with a force stop. Kill command doesn't take an argument because only one production can be running. iop -k stop The stop command stop a production. Stop command doesn't take an argument because only one production can be running. iop -S restart The restart command restart a production. Restart command doesn't take an argument because only one production can be running. iop -r migrate The migrate command migrate a production and classes with settings file. Migrate command must take the absolute path of the settings file. Settings file must be in the same folder as the python code. iop -M /tmp/settings.py export The export command export a production. If no argument is given, the export command export the default production. iop -e If an argument is given, the export command export the production given in argument. iop -e PEX.Production output : { \"Production\": { \"@Name\": \"PEX.Production\", \"@TestingEnabled\": \"true\", \"@LogGeneralTraceEvents\": \"false\", \"Description\": \"\", \"ActorPoolSize\": \"2\", \"Item\": [ { \"@Name\": \"Python.FileOperation\", \"@Category\": \"\", \"@ClassName\": \"Python.FileOperation\", \"@PoolSize\": \"1\", \"@Enabled\": \"true\", \"@Foreground\": \"false\", \"@Comment\": \"\", \"@LogTraceEvents\": \"true\", \"@Schedule\": \"\", \"Setting\": [ { \"@Target\": \"Adapter\", \"@Name\": \"Charset\", \"#text\": \"utf-8\" }, { \"@Target\": \"Adapter\", \"@Name\": \"FilePath\", \"#text\": \"/irisdev/app/output/\" }, { \"@Target\": \"Host\", \"@Name\": \"%settings\", \"#text\": \"path=/irisdev/app/output/\" } ] } ] } } status The status command status a production. Status command doesn't take an argument because only one production can be running. iop -x output : { \"Production\": \"PEX.Production\", \"Status\": \"stopped\" } Status can be : - stopped - running - suspended - troubled version The version command display the version. iop -v output : 2.3.0 log The log command display the log. To exit the command, you have to press CTRL+C. iop -L output : 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting production 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.FileOperation 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.EmailOperation ...","title":"Command Line"},{"location":"command-line/#command-line","text":"Since version 2.3.1, you can use the command line to register your components and productions. To use it, you have to use the following command : iop output : usage: python3 -m iop [-h] [-d DEFAULT] [-l] [-s START] [-k] [-S] [-r] [-M MIGRATE] [-e EXPORT] [-x] [-v] [-L] optional arguments: -h, --help display help and default production name -d DEFAULT, --default DEFAULT set the default production -l, --lists list productions -s START, --start START start a production -k, --kill kill a production (force stop) -S, --stop stop a production -r, --restart restart a production -M MIGRATE, --migrate MIGRATE migrate production and classes with settings file -e EXPORT, --export EXPORT export a production -x, --status status a production -v, --version display version -L, --log display log default production: PEX.Production","title":"Command line"},{"location":"command-line/#help","text":"The help command display the help and the default production name. iop -h output : usage: python3 -m iop [-h] [-d DEFAULT] [-l] [-s START] [-k] [-S] [-r] [-M MIGRATE] [-e EXPORT] [-x] [-v] [-L] ... default production: PEX.Production","title":"help"},{"location":"command-line/#default","text":"The default command set the default production. With no argument, it display the default production. iop -d output : default production: PEX.Production With an argument, it set the default production. iop -d PEX.Production","title":"default"},{"location":"command-line/#lists","text":"The lists command list productions. iop -l output : { \"PEX.Production\": { \"Status\": \"Stopped\", \"LastStartTime\": \"2023-05-31 11:13:51.000\", \"LastStopTime\": \"2023-05-31 11:13:54.153\", \"AutoStart\": 0 } }","title":"lists"},{"location":"command-line/#start","text":"The start command start a production. To exit the command, you have to press CTRL+C. iop -s PEX.Production output : 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting production 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.FileOperation 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.EmailOperation ...","title":"start"},{"location":"command-line/#kill","text":"The kill command kill a production (force stop). Kill command is the same as stop command but with a force stop. Kill command doesn't take an argument because only one production can be running. iop -k","title":"kill"},{"location":"command-line/#stop","text":"The stop command stop a production. Stop command doesn't take an argument because only one production can be running. iop -S","title":"stop"},{"location":"command-line/#restart","text":"The restart command restart a production. Restart command doesn't take an argument because only one production can be running. iop -r","title":"restart"},{"location":"command-line/#migrate","text":"The migrate command migrate a production and classes with settings file. Migrate command must take the absolute path of the settings file. Settings file must be in the same folder as the python code. iop -M /tmp/settings.py","title":"migrate"},{"location":"command-line/#export","text":"The export command export a production. If no argument is given, the export command export the default production. iop -e If an argument is given, the export command export the production given in argument. iop -e PEX.Production output : { \"Production\": { \"@Name\": \"PEX.Production\", \"@TestingEnabled\": \"true\", \"@LogGeneralTraceEvents\": \"false\", \"Description\": \"\", \"ActorPoolSize\": \"2\", \"Item\": [ { \"@Name\": \"Python.FileOperation\", \"@Category\": \"\", \"@ClassName\": \"Python.FileOperation\", \"@PoolSize\": \"1\", \"@Enabled\": \"true\", \"@Foreground\": \"false\", \"@Comment\": \"\", \"@LogTraceEvents\": \"true\", \"@Schedule\": \"\", \"Setting\": [ { \"@Target\": \"Adapter\", \"@Name\": \"Charset\", \"#text\": \"utf-8\" }, { \"@Target\": \"Adapter\", \"@Name\": \"FilePath\", \"#text\": \"/irisdev/app/output/\" }, { \"@Target\": \"Host\", \"@Name\": \"%settings\", \"#text\": \"path=/irisdev/app/output/\" } ] } ] } }","title":"export"},{"location":"command-line/#status","text":"The status command status a production. Status command doesn't take an argument because only one production can be running. iop -x output : { \"Production\": \"PEX.Production\", \"Status\": \"stopped\" } Status can be : - stopped - running - suspended - troubled","title":"status"},{"location":"command-line/#version","text":"The version command display the version. iop -v output : 2.3.0","title":"version"},{"location":"command-line/#log","text":"The log command display the log. To exit the command, you have to press CTRL+C. iop -L output : 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting production 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.FileOperation 2021-08-30 15:13:51.000 [PEX.Production] INFO: Starting item Python.EmailOperation ...","title":"log"},{"location":"example/","text":"Example Add an example of a business operation and messages in Python. Business Operation Here is an example of a business operation in Python: from iop import BusinessOperation, Message from dataclasses import dataclass class MyBusinessOperation(BusinessOperation): def on_init(self): # This method is called when the component is becoming active in the production self.log_info(\"[Python] ...MyBusinessOperation:on_init() is called\") return def on_teardown(self): # This method is called when the component is becoming inactive in the production self.log_info(\"[Python] ...MyBusinessOperation:on_teardown() is called\") return def on_message(self, message_input: 'MyRequest'): # Called from service/process/operation, message is of type MyRequest with property request_string self.log_info(\"[Python] ...MyBusinessOperation:on_message() is called with message:\" + message_input.request_string) response = MyResponse(\"...MyBusinessOperation:on_message() echos\") return response @dataclass class MyRequest(Message): request_string: str = None @dataclass class MyResponse(Message): my_string: str = None Register a Component To register a component, you need to create a setting.py file in the root of your project. This file will be used to register your classes and productions. Example of setting.py: import bo CLASSES = { \"Python.MyBusinessOperation\": bo.MyBusinessOperation } Then you can use the iop command line to register your component: iop --migrate /path/to/your/project/setting.py","title":"Example"},{"location":"example/#example","text":"Add an example of a business operation and messages in Python.","title":"Example"},{"location":"example/#business-operation","text":"Here is an example of a business operation in Python: from iop import BusinessOperation, Message from dataclasses import dataclass class MyBusinessOperation(BusinessOperation): def on_init(self): # This method is called when the component is becoming active in the production self.log_info(\"[Python] ...MyBusinessOperation:on_init() is called\") return def on_teardown(self): # This method is called when the component is becoming inactive in the production self.log_info(\"[Python] ...MyBusinessOperation:on_teardown() is called\") return def on_message(self, message_input: 'MyRequest'): # Called from service/process/operation, message is of type MyRequest with property request_string self.log_info(\"[Python] ...MyBusinessOperation:on_message() is called with message:\" + message_input.request_string) response = MyResponse(\"...MyBusinessOperation:on_message() echos\") return response @dataclass class MyRequest(Message): request_string: str = None @dataclass class MyResponse(Message): my_string: str = None","title":"Business Operation"},{"location":"example/#register-a-component","text":"To register a component, you need to create a setting.py file in the root of your project. This file will be used to register your classes and productions. Example of setting.py: import bo CLASSES = { \"Python.MyBusinessOperation\": bo.MyBusinessOperation } Then you can use the iop command line to register your component: iop --migrate /path/to/your/project/setting.py","title":"Register a Component"},{"location":"getting-started/first-steps/","text":"Getting Started with Interoperability On Python Welcome to the guide on getting started with Interoperability Embedded Python. This document will walk you through the initial steps to set up and begin using Python in your interoperability projects. Prerequisites Before you begin, ensure you have the following: A working installation of InterSystems IRIS with Embedded Python configured Basic knowledge of Python programming Setting Up the Virtual Environment To begin, you will need to set up a virtual environment for your Python project. A virtual environment is a self-contained directory that contains a Python installation for a particular version of Python, as well as any additional packages you may need for your project. To create a virtual environment, run the following command in your terminal: python -m venv .venv This will create a new directory called .venv in your project directory, which will contain the Python interpreter and any packages you install. Next, activate the virtual environment by running the following command: For Unix or MacOS: source .venv/bin/activate For Windows: .venv\\Scripts\\activate You should now see the name of your virtual environment in your terminal prompt, indicating that the virtual environment is active. Installing Required Packages With your virtual environment activated, you can now install any required packages for your project. To install a package, use the pip command followed by the package name. For example, to install the iris-pex-embedded-python package, run the following command: pip install iris-pex-embedded-python Init the application using the following command: iop --init This will install the package and any dependencies it requires. Hello World Now that you have set up your virtual environment and installed the required packages, you are ready to create your first Interoperability production using Python. Create a Business Operation For this, we will create an BusinessOperation that will take a message as input and will return a message as output. In between, it will just print \"Hello World\" in the logs. To do this, let's create a new folder named hello_world . mkdir hello_world In this folder, create a new file named bo.py . This file will contain the code of our business operation. from iop import BusinessOperation class MyBo(BusinessOperation): def on_message(self, request): self.log_info(\"Hello World\") Let's explain this code. First, we import the BusinessOperation class from the iop module. Then, we create a class named MyBo that inherits from BusinessOperation . Finally, we override the on_message method. This method will be called when a message is received by the business operation. Import this Business Operation in the framework Now, we need to add this business operation to what we call a production. To do this, we will create a new file in the hello_world folder, named settings.py . Every project starts at it's root folder by a file named settings.py . This file contains two main settings: CLASSES : it contains the classes that will be used in the project. PRODUCTIONS : it contains the name of the production that will be used in the project. from hello_world.bo import MyBo CLASSES = { \"MyIRIS.MyBo\": MyBo } PRODUCTIONS = [ { 'MyIRIS.Production': { \"@TestingEnabled\": \"true\", \"Item\": [ { \"@Name\": \"Instance.Of.MyBo\", \"@ClassName\": \"MyIRIS.MyBo\", } ] } } ] In this file, we import our MyBo class named in iris MyIRIS.MyBo , and we add it to the CLASSES dictionnary. Then, we add a new production to the PRODUCTIONS list. This production will contain our MyBo class instance named Instance.Of.MyBo . With the iop command, we can now create the production in IRIS. iop --migrate /path/to/hello_world/settings.py This command will create the production in IRIS and add the MyBo class to it. Run the production and test it Now that the production is created, we can run it and test it.","title":"First Steps"},{"location":"getting-started/first-steps/#getting-started-with-interoperability-on-python","text":"Welcome to the guide on getting started with Interoperability Embedded Python. This document will walk you through the initial steps to set up and begin using Python in your interoperability projects.","title":"Getting Started with Interoperability On Python"},{"location":"getting-started/first-steps/#prerequisites","text":"Before you begin, ensure you have the following: A working installation of InterSystems IRIS with Embedded Python configured Basic knowledge of Python programming","title":"Prerequisites"},{"location":"getting-started/first-steps/#setting-up-the-virtual-environment","text":"To begin, you will need to set up a virtual environment for your Python project. A virtual environment is a self-contained directory that contains a Python installation for a particular version of Python, as well as any additional packages you may need for your project. To create a virtual environment, run the following command in your terminal: python -m venv .venv This will create a new directory called .venv in your project directory, which will contain the Python interpreter and any packages you install. Next, activate the virtual environment by running the following command: For Unix or MacOS: source .venv/bin/activate For Windows: .venv\\Scripts\\activate You should now see the name of your virtual environment in your terminal prompt, indicating that the virtual environment is active.","title":"Setting Up the Virtual Environment"},{"location":"getting-started/first-steps/#installing-required-packages","text":"With your virtual environment activated, you can now install any required packages for your project. To install a package, use the pip command followed by the package name. For example, to install the iris-pex-embedded-python package, run the following command: pip install iris-pex-embedded-python Init the application using the following command: iop --init This will install the package and any dependencies it requires.","title":"Installing Required Packages"},{"location":"getting-started/first-steps/#hello-world","text":"Now that you have set up your virtual environment and installed the required packages, you are ready to create your first Interoperability production using Python.","title":"Hello World"},{"location":"getting-started/first-steps/#create-a-business-operation","text":"For this, we will create an BusinessOperation that will take a message as input and will return a message as output. In between, it will just print \"Hello World\" in the logs. To do this, let's create a new folder named hello_world . mkdir hello_world In this folder, create a new file named bo.py . This file will contain the code of our business operation. from iop import BusinessOperation class MyBo(BusinessOperation): def on_message(self, request): self.log_info(\"Hello World\") Let's explain this code. First, we import the BusinessOperation class from the iop module. Then, we create a class named MyBo that inherits from BusinessOperation . Finally, we override the on_message method. This method will be called when a message is received by the business operation.","title":"Create a Business Operation"},{"location":"getting-started/first-steps/#import-this-business-operation-in-the-framework","text":"Now, we need to add this business operation to what we call a production. To do this, we will create a new file in the hello_world folder, named settings.py . Every project starts at it's root folder by a file named settings.py . This file contains two main settings: CLASSES : it contains the classes that will be used in the project. PRODUCTIONS : it contains the name of the production that will be used in the project. from hello_world.bo import MyBo CLASSES = { \"MyIRIS.MyBo\": MyBo } PRODUCTIONS = [ { 'MyIRIS.Production': { \"@TestingEnabled\": \"true\", \"Item\": [ { \"@Name\": \"Instance.Of.MyBo\", \"@ClassName\": \"MyIRIS.MyBo\", } ] } } ] In this file, we import our MyBo class named in iris MyIRIS.MyBo , and we add it to the CLASSES dictionnary. Then, we add a new production to the PRODUCTIONS list. This production will contain our MyBo class instance named Instance.Of.MyBo . With the iop command, we can now create the production in IRIS. iop --migrate /path/to/hello_world/settings.py This command will create the production in IRIS and add the MyBo class to it.","title":"Import this Business Operation in the framework"},{"location":"getting-started/first-steps/#run-the-production-and-test-it","text":"Now that the production is created, we can run it and test it.","title":"Run the production and test it"},{"location":"getting-started/installation/","text":"Installation Guide Welcome to the installation guide for IoP. This guide will walk you through the steps to install the application on your local machine or in a docker container image. Prerequisites Before you begin, ensure you have the following installed: Python 3.6 or higher IRIS 2021.1 or higher Embedded Python configured in IRIS Configuring Embedded Python With PyPi To install the application using PyPi, run the following command: pip install iris-pex-embedded-python Then you can run the application using the following command: iop --init Check the documentation about the command line interface here for more information. With ZPM/IPM To install the application using ZPM or IPM, run the following command: zpm \"install iris-pex-embedded-python\"","title":"Installation"},{"location":"getting-started/installation/#installation-guide","text":"Welcome to the installation guide for IoP. This guide will walk you through the steps to install the application on your local machine or in a docker container image.","title":"Installation Guide"},{"location":"getting-started/installation/#prerequisites","text":"Before you begin, ensure you have the following installed: Python 3.6 or higher IRIS 2021.1 or higher Embedded Python configured in IRIS Configuring Embedded Python","title":"Prerequisites"},{"location":"getting-started/installation/#with-pypi","text":"To install the application using PyPi, run the following command: pip install iris-pex-embedded-python Then you can run the application using the following command: iop --init Check the documentation about the command line interface here for more information.","title":"With PyPi"},{"location":"getting-started/installation/#with-zpmipm","text":"To install the application using ZPM or IPM, run the following command: zpm \"install iris-pex-embedded-python\"","title":"With ZPM/IPM"}]}